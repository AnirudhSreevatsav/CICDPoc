name: CICD Pipeline

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-and-push-ecr:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images to ECR

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials (use secrets)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build Docker image with dynamic tag 
      - name: Build Docker image
        run: |
          # Define the dynamic tag (e.g., using the Git commit SHA)
          TAG=$(echo ${{ github.sha }} | head -c8)
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          AWS_REGION_NAME="${{ secrets.AWS_REGION_NAME }}"
          IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION_NAME}.amazonaws.com/docker/dockrepo:${TAG}"
          
          # Debugging: Print the IMAGE_NAME to ensure it's correctly formatted
          echo "AWS_ACCOUNT_ID is $AWS_ACCOUNT_ID"
          echo "AWS_REGION_NAME is $AWS_REGION_NAME"
          echo "IMAGE_NAME is $IMAGE_NAME"
          
          # Build and tag the Docker image
          docker build -t $IMAGE_NAME .

          # Output the tag for later use
          echo "::set-output name=image::$IMAGE_NAME"
        id: docker_build

      # Step 5: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          # Push the Docker image
          docker push ${{ steps.docker_build.outputs.image }}

  deploy-to-ec2:
    runs-on: ubuntu-latest
    name: Deploy and Run Docker Images on EC2
    needs: build-and-push-ecr

    steps:
      # Step 1: SSH into EC2 and deploy containers using Docker Compose 
      - name: SSH into EC2 and deploy containers using Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop any services that might be using port 80 (like Nginx or Apache)
            sudo systemctl stop nginx || echo "nginx not installed or running"

            # Install Docker if not present
            if ! command -v docker &> /dev/null
            then
                sudo apt-get update
                sudo apt-get install -y docker.io
            fi

            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null
            then
                sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Install unzip if not present
            if ! command -v unzip &> /dev/null
            then
                sudo apt-get install -y unzip
            fi

            # Install AWS CLI if not present
            if ! command -v aws &> /dev/null
            then
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
            fi

            # Ensure AWS CLI is in the path
            export PATH=$PATH:/usr/local/bin

            # Configure AWS CLI on EC2 instance (optional if instance role already allows access)
            aws configure set aws_access_key_id ***
            aws configure set aws_secret_access_key ***
            aws configure set region ***

            # Docker login to ECR (specify the region for ECR)
            aws ecr get-login-password --region *** | sudo docker login --username AWS --password-stdin ***.dkr.ecr.***.amazonaws.com

            # Clean up Docker to free space
            sudo docker container prune -f
            sudo docker image prune -a -f
            sudo docker volume prune -f
            sudo docker network prune -f

            # Pull the Docker image from ECR 
            TAG=$(echo 1754735c644fb7f93fc2840fa3756dcdd562f840 | head -c8)
            IMAGE_NAME=***.dkr.ecr.***.amazonaws.com/discoveryservice:$TAG
            sudo docker pull $IMAGE_NAME

            # Run the Flask app container
            sudo docker run -d -p 8080:8080 --name flask_app_container $IMAGE_NAME

