name: Deploy Flask App to EC2

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout the repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build the Docker image for the Flask app
      - name: Build Docker image
        run: docker build -t discoveryservice:latest .

      # Step 4: Save Docker image to a file
      - name: Save Docker image to file
        run: docker save discoveryservice:latest | gzip > docker_image.tar.gz

      # Step 5: Copy Docker image tarball to EC2 instance
      - name: Copy Docker image to EC2
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER || 'ec2-user' }}  # Default to 'ec2-user' if EC2_USER is not set
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ./docker_image.tar.gz
          target: /home/{{ secrets.EC2_USER || 'ec2-user' }}/docker_image.tar.gz

      # Step 6: SSH into EC2 instance and run the Flask app in Docker
      - name: SSH into EC2 and run Docker container
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER || 'ec2-user' }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Load the Docker image
            docker load -i docker_image.tar.gz
            # Stop any existing container
            docker stop discoveryservice || true
            docker rm discoveryservice || true
            # Run the new container
            docker run -d -p 8080:8080 --name discoverysvccont discoveryservice:latest
